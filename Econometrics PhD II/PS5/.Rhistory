legend.title.size=.001,
legend.position = c("left","top"),
legend.bg.color = "gray100",
legend.bg.alpha=.2,
legend.frame='gray100',
legend.height= 2,
legend.width = 2,
legend.hist.width=.15,
legend.hist.height=.15,
legend.hist.bg.color="gray60",
legend.hist.bg.alpha=.5) +
# tm_shape(tract[tract$zip == 11212,]) +
# tm_fill(col = "gray85", alpha = .6) + tm_borders(col = "black") +
# tm_shape(tract[tract$zip == 11203,]) +
# tm_fill(col = "gray85", alpha = .6) + tm_borders(col = "black") +
# tm_shape(tract[tract$zip == 11228,]) +
# tm_fill(col = "gray85", alpha = .6) + tm_borders(col = "black") +
# tm_shape(tract[tract$zip == 11229,]) +
# tm_fill(col = "gray85", alpha = .6) + tm_borders(col = "black") +
# tm_shape(tract[tract$zip == 11219, ]) +
# tm_fill(col = "gray85", alpha = .6) + tm_borders(col = "black") +
tm_layout(main.title = NA,
main.title.size = 1.8, fontfamily = "sans", main.title.position = 0.13)
}
tm_plot(tract,'frequency') # (8.71*5.54 inch)
els_raw <- read.csv('/Users/zongyangli/Google Drive/Research/Projects/Education/Inter-generational Mobility/Data/ELS_2002-12_v1_0_CSV_Datasets/els_02_12_byf3stu_v1_0.csv')
colnames(els_raw)
els_raw <- read.csv('/Users/zongyangli/Google Drive/Research/Projects/Education/Inter-generational Mobility/Data/els_02_12_byf3pststu_v1_0.csv')
colnames(els_raw)
source("/Users/zongyangli/Documents/Github/R-Key-functions/Start up.R")
els_raw_select_1 <- els_raw %>%
select(STU_ID, SCH_ID, STRAT_ID, PSU, F1SCH_ID, F1UNIV1, F1UNIV2A, F1UNIV2B, F2UNIV1, F2UNIV_P, F3UNIV, F3UNIVG10, F3UNIVG12, G10COHRT, G12COHRT, BYSTUWT, BYSEX, BYRACE, BYSTLANG, BYHOMLNG, BYDOB_R, BYPLANG, BYFCOMP, BYGNSTAT, BYPARED, BYMOTHED, BYFATHED, BYGPARED, BYINCOME, BYSES1, BYLGRRPT, BYSTEXP, BYTXMSTD, BYTXRSTD, BYCENDIV, BYCOUNTY, BYSCHZIP, F1SEX, F1RACE_R, F1RACE, F1STLANG, F1HOMLNG, F1DOB_P, F1FCOMP, F1PARED, F1MOTHED, F1FATHED, F1OCCUM, F1OCCUF, F1SES1R, F1STEXP, F1OCCHS, F1OCC30, F1NRSTAT, F1TSTAT, F1BYTFLG, F1EVERDO, F1DOSTAT, F1CTLPTN, F1GRADE, F1TXMSTD, F1RESZIP, F1WRKHRS, F1TVVIGM, F1RPSATM, F1RPSATV, F1RPSATW, F1RPSAMM, F1RPSAVM, F1RPSAWM, TXEESATC, TXEEACTC, F2SEX, F2EVERDO, F2DOSTAT, F2F1GR_P, F2F1GRDE, F2HSSTAT, F2F1HSST, F2HSATTM, F2WYLV1, F2SPPCUM, F3HSSTAT, F3EVERDO, F3EVRGED, F3JUNEDSTAT, F3EDSTAT, F3PS1SLC, F3PSLCRED, F3ATTAINMENT, F3ERN2011, F3EMPINC2011, F3SPERN2011, F3ALLINC2011, F3DEBTEMP2011, F3DEBTALL2011, F3MARRAGE)
View(els_raw_select_1)
els_raw <- read.csv('/Users/zongyangli/Google Drive/Research/Projects/Education/Inter-generational Mobility/Data/ELS_2002-12_v1_0_CSV_Datasets/els_02_12_byf3stu_v1_0.csv')
els_raw_select_1 <- els_raw %>%
select(STU_ID, SCH_ID, STRAT_ID, PSU, F1SCH_ID, F1UNIV1, F1UNIV2A, F1UNIV2B, F2UNIV1, F2UNIV_P, F3UNIV, F3UNIVG10, F3UNIVG12, G10COHRT, G12COHRT, BYSTUWT, BYSEX, BYRACE, BYSTLANG, BYHOMLNG, BYDOB_R, BYPLANG, BYFCOMP, BYGNSTAT, BYPARED, BYMOTHED, BYFATHED, BYGPARED, BYINCOME, BYSES1, BYLGRRPT, BYSTEXP, BYTXMSTD, BYTXRSTD, BYCENDIV, BYCOUNTY, BYSCHZIP, F1SEX, F1RACE_R, F1RACE, F1STLANG, F1HOMLNG, F1DOB_P, F1FCOMP, F1PARED, F1MOTHED, F1FATHED, F1OCCUM, F1OCCUF, F1SES1R, F1STEXP, F1OCCHS, F1OCC30, F1NRSTAT, F1TSTAT, F1BYTFLG, F1EVERDO, F1DOSTAT, F1CTLPTN, F1GRADE, F1TXMSTD, F1RESZIP, F1WRKHRS, F1TVVIGM, F1RPSATM, F1RPSATV, F1RPSATW, F1RPSAMM, F1RPSAVM, F1RPSAWM, TXEESATC, TXEEACTC, F2SEX, F2EVERDO, F2DOSTAT, F2F1GR_P, F2F1GRDE, F2HSSTAT, F2F1HSST, F2HSATTM, F2WYLV1, F2SPPCUM, F3HSSTAT, F3EVERDO, F3EVRGED, F3JUNEDSTAT, F3EDSTAT, F3PS1SLC, F3PSLCRED, F3ATTAINMENT, F3ERN2011, F3EMPINC2011, F3SPERN2011, F3ALLINC2011, F3DEBTEMP2011, F3DEBTALL2011, F3MARRAGE)ßß
els_raw_select_1 <- els_raw %>%
select(STU_ID, SCH_ID, STRAT_ID, PSU, F1SCH_ID, F1UNIV1, F1UNIV2A, F1UNIV2B, F2UNIV1, F2UNIV_P, F3UNIV, F3UNIVG10, F3UNIVG12, G10COHRT, G12COHRT, BYSTUWT, BYSEX, BYRACE, BYSTLANG, BYHOMLNG, BYDOB_R, BYPLANG, BYFCOMP, BYGNSTAT, BYPARED, BYMOTHED, BYFATHED, BYGPARED, BYINCOME, BYSES1, BYLGRRPT, BYSTEXP, BYTXMSTD, BYTXRSTD, BYCENDIV, BYCOUNTY, BYSCHZIP, F1SEX, F1RACE_R, F1RACE, F1STLANG, F1HOMLNG, F1DOB_P, F1FCOMP, F1PARED, F1MOTHED, F1FATHED, F1OCCUM, F1OCCUF, F1SES1R, F1STEXP, F1OCCHS, F1OCC30, F1NRSTAT, F1TSTAT, F1BYTFLG, F1EVERDO, F1DOSTAT, F1CTLPTN, F1GRADE, F1TXMSTD, F1RESZIP, F1WRKHRS, F1TVVIGM, F1RPSATM, F1RPSATV, F1RPSATW, F1RPSAMM, F1RPSAVM, F1RPSAWM, TXEESATC, TXEEACTC, F2SEX, F2EVERDO, F2DOSTAT, F2F1GR_P, F2F1GRDE, F2HSSTAT, F2F1HSST, F2HSATTM, F2WYLV1, F2SPPCUM, F3HSSTAT, F3EVERDO, F3EVRGED, F3JUNEDSTAT, F3EDSTAT, F3PS1SLC, F3PSLCRED, F3ATTAINMENT, F3ERN2011, F3EMPINC2011, F3SPERN2011, F3ALLINC2011, F3DEBTEMP2011, F3DEBTALL2011, F3MARRAGE)
nrow(els_raw_select_1)
table(els_raw_select_1$BYSEX)
summarise(els_raw_select_1$BYINCOME)
summarise(els_raw_select_1$BYINCOME)
mean(els_raw_select_1$BYINCOME)
?runif
source("/Users/zongyangli/Documents/Github/R-Key-functions/Start up.R")
setwd("/Users/zongyangli/Google Drive/Cornell PhD/Second Semester/Econometrics/PS/PS 5 - Boostrap")
setwd("/Users/zongyangli/Documents/GitHub/econometrics-essential/Econometrics PhD II/PS5")
data <- runif(1000, min = -1, max = 1)
mean(data)
B = 500
n = length(data)
n = nrow(data)
n = length(data)
n
?sample
sample_n(mtcars, 10)
boot_sample <- matrix(sample(data, size = B*n, replace = T), B, n)
View(boot_sample)
?apply
boot_mean = apply(boot_sample, 1, mean) # calculate mean for each row(draw)
sample <- runif(1000, min = -1, max = 1)
sample_mean = mean(sample) # -0.0089
# resample
B = 500 # num of draws
n = length(sample) # size of BS sample = original sample size
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
# compute mean for bootstrap sample
boot_sample_mean = apply(boot_sample, 1, mean) # calculate mean for each row(draw)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
d
CI = sample_mean - c(d[2],d[1])
CI
cat(’Confidence interval: ’,CI, ’\n’)
cat('Confidence interval: ',CI, '\n')
cat('Confidence interval: ',CI, '\n')
CI[1]
CI <- as.integer(CI)
CI
d
?quantile
d(1)
CI = sample_mean - c(d[2],d[1])
CI
uname(CI)
unname(CI)
CI[[1]]
CI
CI = unname(CI)
CI
CI[1]
CI = sample_mean - c(d[2],d[1])
x<- data.fram()
x<- data.framm()
x<- as.data.framm()
x <- as.data.frame()
ifelse(CI[[1]] < 0 < CI[[2]], 1, 0)
ifelse(CI[[1]] < 0, 1, 0)
ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
result <- data.frame(success=integer())
View(result)
for(i in 1:10) {
n = length(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
result[i,] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
View(result)
?rsign
install.packages("rsign")
???rsign
??rsign
install.packages("rsign")
?rwild
??rwild
install.packages("extraDistr")
?rsign
?Rademacher
?dzib
rsign(4)
library(extraDistr)
?rsign
rsign(4)
rsign(100)
boot_success = function(n) {
for(i in 1:10) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
boot_success(10)
boot_success(10)
View(result)
boot_success = function(n) {
for(i in 1:15) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
boot_success(10)
boot_success(n=10)
for(i in 1:15) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
10 %>% boot_success
boot_success(10,10)
boot_success = function(n,k) {
for(i in 1:k) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
boot_success(10,10)
boot_success(100,100)
for(n in sample_size){
for(i in 1:500) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,n] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
result <- data.frame(success=integer())
sample_size <- c(10,500)
for(n in sample_size){
for(i in 1:500) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,n] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
for(n in sample_size){
for (h in 1:3) {
for(i in 1:500) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,n] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
}
for(n in sample_size){
for (h in 1:3) {
for(i in 1:500) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,h] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
}
View(result)
?colSums
View(result)
colSums(result$success)
sum(result$V1)
sum(result$V2)
sum(result$V3)
sum(result$success)
sum(result$success)
sum(result$V2)
sum(result$V3)
result <- data.frame(V1=integer(),V2=integer())
sample_size <- c(10,500)
View(result)
for(n in sample_size){
for (h in 1:3) {
for(i in 1:500) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,h] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
}
sum(result$V1)
sum(result$V2)
sample_size <- c(500,10)
for(n in sample_size){
for (h in 1:3) {
for(i in 1:500) {
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# save the result: if the true mean (0) is contained in the CI, return 1
result[i,h] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
}
sample
sum(result$V1)/500
sum(result$V2)/500
sample_size <- c(10,500)
for(n in sample_size){
for (h in 1:3) {
for(i in 1:500) {
# bootstrap as in Q1
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result: if the true mean (0) is contained in the CI, return 1
result[i,h] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
}
}
sum(result$V1)/500
sum(result$V2)/500
sample_1 <- runif(n*B, min = -1, max = 1)
sample_1[sample_1 >= 0] <- 1
sample_1[sample_1 <= 0] <- -1
sample_1
sample_2 <- 2^(rgeom(N*B, prob = 0.5)/2)
n = 500
B = 500
sample_1 <- runif(n*B, min = -1, max = 1)
sample_1[sample_1 >= 0] <- 1
sample_1[sample_1 <= 0] <- -1
sample_2 <- 2^(rgeom(n*B, prob = 0.5)/2)
sample_2
sample_product = sample_1*sample_2
sample_mean = mean(sample_product) # -0.0089
sample_mean
sample_product
boot_sample <- matrix(sample(sample_product, size = B*n, replace = T), B, n)
# compute mean for bootstrap sample
boot_sample_mean = apply(boot_sample, 1, mean) # calculate mean for each row(draw)
# compute empirical theta_hat - theta_0 & quntiles
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
CI
CI = sample_mean - c(d[2],d[1])
cat('Confidence interval: ',CI, '\n')
View(result)
result <- data.frame(V1=integer(),V2=integer()) ## save the accuracy result
View(result)
sample_size <- c(10,500)
for(n in sample_size){
j = 1
for(i in 1:500) {
# bootstrap as in Q1
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result: if the true mean (0) is contained in the CI, return 1
result[i,j] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
j = j + 1
}
}
View(result)
result <- data.frame(V1=integer(),V2=integer()) ## save the accuracy result
sample_size <- c(10,500)
j = 1
for(n in sample_size){
for(i in 1:500) {
# bootstrap as in Q1
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result: if the true mean (0) is contained in the CI, return 1
result[i,j] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
j = j + 1
}
View(result)
sum(result$V1)/500 # 0.882
sum(result$V2)/500 # 0.89
result <- data.frame(V1=integer(),V2=integer()) ## save the accuracy result
sample_size <- c(10,500)
j = 1 # j allow to change column in saving result
for(n in sample_size){
for(i in 1:500) {
# bootstrap as in Q1
sample <- runif(n, min = -1, max = 1)
sample_mean = mean(sample)
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result: if the true mean (0) is contained in the CI, return 1
result[i,j] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
j = j + 1
}
sum(result$V1)/500 # 0.85
sum(result$V2)/500 # 0.906
result_2 <- data.frame(V1=integer(),V2=integer()) ## save the accuracy result_2
sample_size <- c(10,500)
j = 1 # j allow to change column in saving result_2
for(n in sample_size){
for(i in 1:500) {
# generate Rademacher distribution & z_i
sample_1 <- runif(n*B, min = -1, max = 1)
sample_1[sample_1 >= 0] <- 1
sample_1[sample_1 <= 0] <- -1
sample_2 <- 2^(rgeom(n*B, prob = 0.5)/2)
sample_product = sample_1*sample_2
sample_mean = mean(sample_product)
# resample
boot_sample <- matrix(sample(sample_product, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result_2: if the true mean (0) is contained in the CI, return 1
result_2[i,j] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
j = j + 1
}
sum(result_2$V1)/500 # 0.85
sum(result_2$V2)/500 # 0.906
sample_mean
CI
# generate unform sample on [-1, 1]
sample <- runif(1000, min = -1, max = 1)
sample_mean = mean(sample) # -0.0089
# resample
B = 500 # num of draws
n = length(sample) # size of BS sample = original sample size
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
# compute mean for bootstrap sample
boot_sample_mean = apply(boot_sample, 1, mean) # calculate mean for each row(draw)
# compute empirical theta_hat - theta_0 & quntiles
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
# calculate the 90% CI
CI = sample_mean - c(d[2],d[1])
cat('Confidence interval: ',CI, '\n')
sample <- runif(1000, min = -1, max = 1)
sample_mean = mean(sample) # -0.0089
sample
sample_mean
B = 500 # num of draws
n = length(sample) # size of BS sample = original sample size
boot_sample <- matrix(sample(sample, size = B*n, replace = T), B, n)
# compute mean for bootstrap sample
boot_sample_mean = apply(boot_sample, 1, mean) # calculate mean for each row(draw)
# compute empirical theta_hat - theta_0 & quntiles
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
# calculate the 90% CI
CI = sample_mean - c(d[2],d[1])
cat('Confidence interval: ',CI, '\n')
########################################################################
## Q2: Rademacher Distribution  ##
result_2 <- data.frame(V1=integer(),V2=integer()) ## save the accuracy result_2
sample_size <- c(10,500)
j = 1 # j allow to change column in saving result_2
for(n in sample_size){
for(i in 1:500) {
# generate Rademacher distribution & z_i
sample_1 <- runif(n*B, min = -1, max = 1)
sample_1[sample_1 >= 0] <- 1
sample_1[sample_1 <= 0] <- -1
sample_2 <- 2^(rgeom(n*B, prob = 0.5)/2)
sample_product = sample_1*sample_2
sample_mean = mean(sample_product)
# resample
boot_sample <- matrix(sample(sample_product, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result_2: if the true mean (0) is contained in the CI, return 1
result_2[i,j] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
j = j + 1
}
# Calculate the accuracy rate for two different sample sizes
sum(result_2$V1)/500 # 0.85
sum(result_2$V2)/500 # 0.906
result_2 <- data.frame(V1=integer(),V2=integer()) ## save the accuracy result_2
sample_size <- c(10,500)
j = 1 # j allow to change column in saving result_2
for(n in sample_size){
for(i in 1:500) {
# generate Rademacher distribution & z_i
sample_1 <- runif(n*B, min = -1, max = 1)
sample_1[sample_1 >= 0] <- 1
sample_1[sample_1 <= 0] <- -1
sample_2 <- 2^(rgeom(n, prob = 0.5)/2)
sample_product = sample_1*sample_2
sample_mean = mean(sample_product)
# resample
boot_sample <- matrix(sample(sample_product, size = B*n, replace = T), B, n)
boot_sample_mean = apply(boot_sample, 1, mean)
theta_star = boot_sample_mean - sample_mean
d = quantile(theta_star, c(0.05, 0.95))
CI = sample_mean - c(d[2],d[1])
# count the result_2: if the true mean (0) is contained in the CI, return 1
result_2[i,j] = ifelse(CI[[1]] < 0 & 0 < CI[[2]], 1, 0)
}
j = j + 1
}
# Calculate the accuracy rate for two different sample sizes
sum(result_2$V1)/500 # 0.85
sum(result_2$V2)/500 # 0.906
